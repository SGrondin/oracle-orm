/*** Generated by streamline 0.10.10 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Row, helpers, __hasProp = {
  }.hasOwnProperty;

  helpers = require("./helpers");

  Row = (function() {
    function Row(connection, table, data) {
      this.connection = connection;
      this.table = table;
      this.data = data;
      this.deleted = false;
      this.makeBackData(); };


    Row.prototype.makeBackData = function() {
      var k, v, _ref;
      this.backdata = { };
      _ref = this.data;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) { continue; };
        v = _ref[k];
        this.backdata[k] = v; };

      return this.backdata; };


    Row.prototype.getDirty = function() {
      var dirty, k, v, _ref;
      dirty = { };
      _ref = this.backdata;
      for (k in _ref) {
        v = _ref[k];
        if ((v !== this.data[k])) {
          dirty[k] = this.data[k]; } ; };


      return dirty; };


    Row.prototype.isDirty = function() {
      return (Object.keys(this.getDirty()).length > 0); };


    Row.prototype.save = function Row_prototype_save__1(_) { var dirty, r, where, __this = this; var __frame = { name: "Row_prototype_save__1", line: 45 }; return __func(_, this, arguments, Row_prototype_save__1, 0, __frame, function __$Row_prototype_save__1() {

        if (__this.deleted) {
          return _(new Error((("Unit " + __this.table.name) + " was deleted and doesn't exist anymore"))); } ;

        dirty = __this.getDirty();
        if ((Object.keys(dirty).length === 0)) {
          return _(null, []); } ;

        where = helpers.getWhere(helpers.getPKPairs(__this), "=");
        return __this.connection.execute(((((("UPDATE " + __this.table.name) + " SET ") + (helpers.getListPlaceholders(dirty, "=")).join(", ")) + " WHERE ") + where), helpers.getValues(dirty), __cb(_, __frame, 10, 26, function ___(__0, __1) { r = __1;
          __this.backdata = __this.data;
          __this.makeBackData();
          return _(null, r); }, true)); }); };


    Row.prototype.sync = function Row_prototype_sync__2(_) { var pairs, r, where, __this = this; var __frame = { name: "Row_prototype_sync__2", line: 61 }; return __func(_, this, arguments, Row_prototype_sync__2, 0, __frame, function __$Row_prototype_sync__2() {

        if (__this.deleted) {
          return _(new Error((("Unit " + __this.table.name) + " was deleted and doesn't exist anymore"))); } ;

        pairs = helpers.getPKPairs(__this);
        where = (helpers.getListPlaceholders(pairs, "=")).join(" AND ");
        return __this.connection.execute(((("SELECT * FROM " + __this.table.name) + " WHERE ") + where), helpers.getValues(pairs), __cb(_, __frame, 7, 26, function ___(__0, __1) { r = __1;
          __this.data = r[0];
          __this.makeBackData();
          return _(null, r); }, true)); }); };


    Row.prototype.del = function Row_prototype_del__3(_) { var pairs, where, __this = this; var __frame = { name: "Row_prototype_del__3", line: 74 }; return __func(_, this, arguments, Row_prototype_del__3, 0, __frame, function __$Row_prototype_del__3() {

        if (__this.deleted) {
          return _(new Error((("Unit " + __this.table.name) + " was deleted and doesn't exist anymore"))); } ;

        pairs = helpers.getPKPairs(__this);
        where = (helpers.getListPlaceholders(pairs, "=")).join(" AND ");
        __this.deleted = true;
        return __this.connection.execute(((("DELETE FROM " + __this.table.name) + " WHERE ") + where), helpers.getValues(pairs), __cb(_, __frame, 8, 29, _, true)); }); };


    return Row;

  })();

  module.exports = Row;

}).call(this);
