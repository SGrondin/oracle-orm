/*** Generated by streamline 0.10.10 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap,__catch=__rt.__catch,__tryCatch=__rt.__tryCatch,__construct=__rt.__construct; (function main(_) { var __this = this; var __frame = { name: "main", line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() {






































































































































































































































































































    return (function ___closure(_) { var ORM, apple, assert, dirty, e, err, fs, models, ok, oracleConnectData, orders, orm, rows, util, _ref; util = require("util"); fs = require("fs"); global.con = function(v) { return util.puts(util.inspect(v)); }; global.stack = function(err) { util.puts(("__" + err.message)); return util.puts(err.stack); }; assert = function(a, b, number) { if ((a === b)) { return console.log((((((">" + number) + " OK ") + a) + " === ") + b)); } else { console.log((((((">" + number) + " FAILED!! ") + a) + " !== ") + b)); throw new Error(("Test " + number)); } ; }; oracleConnectData = JSON.parse((fs.readFileSync((__dirname + "/../testDB.json"))).toString("utf8")); ORM = require("oracle-orm"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return __construct(ORM, 2)(oracleConnectData, true, __cb(_, __frame, NaN, NaN, function ___(__0, __3) { orm = __3; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return orm.execute("DROP TABLE PERSON", [], __cb(_, __frame, 32, 10, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { err = _error; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return orm.execute("DROP TABLE \"ORDER\"", [], __cb(_, __frame, 37, 10, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { err = _error; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { return orm.execute("CREATE TABLE PERSON (AAA NUMBER, BBB VARCHAR2(50), F_ORDER_ID NUMBER)", [], __cb(_, __frame, 41, 8, function __$___closure() { return orm.execute((("ALTER TABLE \"" + oracleConnectData.user) + "\".\"PERSON\" ADD CONSTRAINT PK_PERSON PRIMARY KEY(\"AAA\",\"F_ORDER_ID\")"), [], __cb(_, __frame, 42, 8, function __$___closure() { return orm.execute("CREATE TABLE \"ORDER\" (ORDER_ID NUMBER, \"NAME\" VARCHAR2(50), NOTE VARCHAR2(50))", [], __cb(_, __frame, 43, 8, function __$___closure() { return orm.execute((("ALTER TABLE \"" + oracleConnectData.user) + "\".\"ORDER\" ADD CONSTRAINT PK_ORDER PRIMARY KEY(\"ORDER_ID\")"), [], __cb(_, __frame, 44, 8, function __$___closure() { return orm.execute((("ALTER TABLE \"" + oracleConnectData.user) + "\".\"PERSON\" ADD CONSTRAINT FK_ORDER FOREIGN KEY(\"F_ORDER_ID\") REFERENCES \"ORDER\"(\"ORDER_ID\")"), [], __cb(_, __frame, 45, 8, function __$___closure() { return orm.getModels(__cb(_, __frame, 46, 17, function ___(__0, __4) { models = __4; return models.PERSON.count(__cb(_, __frame, 47, 25, function ___(__0, __5) { assert(__5, 0, "1"); return models.ORDER.add({ ORDER_ID: 1, NAME: "avocado" }, __cb(_, __frame, 48, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 2, NAME: "banana" }, __cb(_, __frame, 52, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 3, NAME: "coconut" }, __cb(_, __frame, 56, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 4, NAME: "date" }, __cb(_, __frame, 60, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 5, NAME: "eggplant" }, __cb(_, __frame, 64, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 6, NAME: "fig" }, __cb(_, __frame, 68, 17, function __$___closure() { return models.ORDER.add({ ORDER_ID: 7, NAME: "grapefruit" }, __cb(_, __frame, 72, 17, function __$___closure() { return models.PERSON.add({ AAA: 10, BBB: "abc", F_ORDER_ID: 1 }, __cb(_, __frame, 76, 18, function __$___closure() { return models.PERSON.add({ AAA: 20, BBB: "xyz", F_ORDER_ID: 2 }, __cb(_, __frame, 81, 18, function __$___closure() { return models.PERSON.add({ AAA: 30, BBB: "def", F_ORDER_ID: 3 }, __cb(_, __frame, 86, 18, function __$___closure() { return models.PERSON.add({ AAA: 40, BBB: "def", F_ORDER_ID: 3 }, __cb(_, __frame, 91, 18, function __$___closure() { return models.PERSON.add({ AAA: 50, F_ORDER_ID: 5 }, __cb(_, __frame, 96, 18, function __$___closure() { return models.PERSON.count(__cb(_, __frame, 100, 25, function ___(__0, __6) { assert(__6, 5, "2"); return models.PERSON.all(__cb(_, __frame, 101, 25, function ___(__0, __7) { rows = __7; assert(rows.length, 5, "3"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return models.PERSON.get({ AAA: ">35" }, ["AAA",], __cb(_, __frame, 105, 27, function ___(__0, __8) { rows = __8; __then(); }, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "3.1"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.PERSON.getUnsafe({ AAA: ">35" }, ["AAA",], __cb(_, __frame, 114, 25, function ___(__0, __9) { rows = __9; assert(rows.length, 2, "4"); assert((((((_ref = rows[0].connection) != null) ? _ref.execute : void 0)) != null), true, "5"); assert(rows[0].table.name, "PERSON", "6"); assert(rows[0].data.AAA, 40, "7"); assert(rows[0].data.BBB, "def", "8"); assert(rows[1].data.AAA, 50, "9"); assert(rows[1].data.BBB, null, "10"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return models.PERSON.updateUnsafe({ AAA: -100 }, { BBB: "abc" }, __cb(_, __frame, 126, 20, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "10.1"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.PERSON.update({ AAA: -100 }, { BBB: "abc" }, __cb(_, __frame, 137, 18, function __$___closure() { return models.PERSON.get({ }, ["F_ORDER_ID","AAA",], __cb(_, __frame, 142, 25, function ___(__0, __10) { rows = __10; assert(rows[0].data.AAA, -100, "11"); assert(rows[0].deleted, false, "12"); return rows[0].del(__cb(_, __frame, 145, 12, function __$___closure() { assert(rows[0].deleted, true, "13"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return rows[0].del(__cb(_, __frame, 149, 14, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "14"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.PERSON.all(__cb(_, __frame, 156, 25, function ___(__0, __11) { rows = __11; return models.PERSON.count(__cb(_, __frame, 157, 25, function ___(__0, __12) { assert(__12, 4, "15"); return models.PERSON.get({ }, ["AAA",], __cb(_, __frame, 158, 25, function ___(__0, __13) { rows = __13; assert(rows[1].backdata.AAA, rows[1].data.AAA, "16"); rows[1].data.AAA++; dirty = rows[1].getDirty(); assert(Object.keys(dirty).length, 1, "17"); assert(rows[1].isDirty(), true, "18"); assert(dirty.AAA, 31, "19"); return rows[1].save(__cb(_, __frame, 165, 12, function __$___closure() { dirty = rows[1].getDirty(); assert(Object.keys(dirty).length, 0, "20"); assert(rows[1].isDirty(), false, "21"); rows[2].data.BBB = "xyz"; dirty = rows[2].getDirty(); assert(Object.keys(dirty).length, 1, "22"); assert(rows[2].isDirty(), true, "23"); return rows[2].sync(__cb(_, __frame, 173, 12, function __$___closure() { dirty = rows[2].getDirty(); assert(Object.keys(dirty).length, 0, "25"); assert(rows[2].isDirty(), false, "26"); return rows[2].save(__cb(_, __frame, 177, 12, function __$___closure() { rows[2].data.BBB = "xyz"; assert(rows[2].isDirty(), true, "27"); return rows[2].reset(__cb(_, __frame, 180, 12, function __$___closure() { assert(rows[2].data.BBB, "def", "28"); assert(rows[2].isDirty(), false, "29"); return models.ORDER.get({ }, ["-NAME",], __cb(_, __frame, 183, 26, function ___(__0, __14) { orders = __14; assert(orders[0].data.NAME, "grapefruit", "30"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return models.ORDER.update({ NOTE: "nothing" }, { ORDER_ID: ">=3" }, __cb(_, __frame, 187, 19, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "30.1"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.ORDER.updateUnsafe({ NOTE: "nothing" }, { ORDER_ID: ">=3" }, __cb(_, __frame, 198, 17, function __$___closure() { assert((orders.filter(function(a) { return (a.data.NOTE === null); })).length, 7, "31"); return orders.forEach_(__cb(_, __frame, 206, 11, function __$___closure() { assert((orders.filter(function(a) { return (a.data.NOTE === null); })).length, 2, "32"); return models.ORDER.count(__cb(_, __frame, 212, 24, function ___(__0, __15) { assert(__15, 7, "33"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return models.ORDER.del({ ORDER_ID: "=4" }, __cb(_, __frame, 215, 19, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "33.1"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.ORDER.del({ ORDER_ID: "4" }, __cb(_, __frame, 224, 17, function __$___closure() { return models.ORDER.count(__cb(_, __frame, 227, 24, function ___(__0, __16) { assert(__16, 6, "34"); return orders.map_(__cb(_, __frame, 228, 20, function ___(__0, __17) { orders = __17; assert(orders[4].isDirty(), false, "35"); orders[4].data.NOTE = "APPLE"; assert(orders[4].isDirty(), true, "36"); return orders[4].save(__cb(_, __frame, 238, 14, function __$___closure() { return orm.execute("SELECT * FROM \"ORDER\" WHERE \"ORDER_ID\" = 3", [], __cb(_, __frame, 239, 16, function ___(__0, __18) { apple = __18; assert(apple[0].NOTE, "APPLE", "36.1"); assert(orders[4].isDirty(), false, "37"); return orm.execute("DELETE FROM \"ORDER\" WHERE \"ORDER_ID\"=7", [], __cb(_, __frame, 242, 8, function __$___closure() { orders[0].data.NOTE = "OOPS"; return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return orders[0].save(__cb(_, __frame, 246, 16, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "38"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { assert((orders[0].data.NOTE != null), false, "39"); return models.ORDER.get({ }, ["NAME",], __cb(_, __frame, 254, 26, function ___(__0, __19) { orders = __19; assert(orders[4].data.NAME, "fig", "40"); assert(orders[4].isDirty(), false, "41"); orders[4].data.NAME = "CHANGED"; assert(orders[4].isDirty(), true, "42"); return orders[4].reset(__cb(_, __frame, 259, 14, function __$___closure() { assert(orders[4].isDirty(), false, "43"); assert(orders[4].deleted, false, "44"); return orders[4].del(__cb(_, __frame, 262, 14, function __$___closure() { assert(orders[4].deleted, true, "45"); return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return orders[2].del(__cb(_, __frame, 266, 16, __then, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "45.1"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.PERSON.empty(__cb(_, __frame, 273, 18, function __$___closure() { return models.PERSON.count(__cb(_, __frame, 274, 25, function ___(__0, __20) { assert(__20, 0, "46"); return orm.execute("DROP TABLE PERSON", [], __cb(_, __frame, 275, 8, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$___closure() { ok = false; return models.PERSON.all(__cb(_, __frame, 278, 27, function ___(__0, __21) { rows = __21; __then(); }, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { e = _error; ok = true; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(null, null, true); }); }); }); })(function ___(__e, __r, __cont) { (function ___(__then) { __tryCatch(_, function __$___closure() { assert(ok, true, "47"); __then(); }); })(function ___() { __tryCatch(_, function ___() { if (__cont) { __then(); } else { _(__e, __r); }; }); }); }); })(function ___() { __tryCatch(_, function __$___closure() { return models.ORDER.empty(__cb(_, __frame, 285, 17, function __$___closure() { return models.ORDER.count(__cb(_, __frame, 286, 24, function ___(__0, __22) { assert(__22, 0, "48"); return orm.execute("DROP TABLE \"ORDER\"", [], __cb(_, __frame, 287, 8, function __$___closure() { console.log("\n\nAll tests passed!\n\n"); __then(); }, true)); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }, true), 1, function __2(_, a) { var __frame = { name: "__2", line: 229 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return (function __$__2(__then) { if ((a.deleted == null)) { return a.sync(__cb(_, __frame, 2, 17, _, true)); } else { return _(null, a); } ; })(_); }); }); }, true)); }, true)); }); }); }, true)); }, true), -1, function __1(_, a) { var __frame = { name: "__1", line: 207 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return a.sync(__cb(_, __frame, 1, 15, _, true)); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); }); }, true)); }, true)); }, true)); }); }); }, true)); }); }); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }, true)); }); }); }); }); }, true)); }); })(function ___(_error, __result) { __catch(function __$___closure() { if (_error) { err = _error; con(err); stack(err); __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$___closure() { _(); }); }); })(_); });}).call(this, __trap);
