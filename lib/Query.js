/*** Generated by streamline 0.10.9 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Query, Row, getPlaceholders, getUpdateFromObject, getValues, getWhereFromObject, placeCounter, types;

  Row = require("./Row");

  types = require("./types");

  placeCounter = 0;

  getPlaceholders = function(nb) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = placeCounter, _ref = ((placeCounter + nb) - 1); ((placeCounter <= _ref) ? (_i <= _ref) : (_i >= _ref)); i = ((placeCounter <= _ref) ? ++_i : --_i)) {
      _results.push((":" + (placeCounter++))); };

    return _results; };


  getWhereFromObject = function(obj) {
    var where;
    where = Object.keys(obj).map(function(k) {
      return (k + obj[k]);
    }).join(" AND ");
    if ((where.length === 0)) {
      return "1=1"; }
     else {
      return where; } ; };



  getUpdateFromObject = function(obj) {
    if ((Object.keys(obj).length === 0)) {
      throw new Error("Update needs to update at least one field."); } ;

    return Object.keys(obj).map(function(k) {
      return ((k + "=") + (getPlaceholders(1)));
    }).join(", "); };


  getValues = function(obj) {
    return Object.keys(obj).map(function(a) {
      return obj[a]; }); };



  Query = (function() {
    function Query(connection, table) {
      this.connection = connection;
      this.table = table; };


    Query.prototype.select = function Query_prototype_select__1(where, orderBy, joins, _) { var order, __this = this; var __frame = { name: "Query_prototype_select__1", line: 52 }; return __func(_, this, arguments, Query_prototype_select__1, 3, __frame, function __$Query_prototype_select__1() {

        order = ((orderBy != null) ? ("ORDER BY " + orderBy.join(" AND ")) : "");
        return (__this.connection.execute(((((("SELECT * FROM " + __this.table) + " WHERE ") + getWhereFromObject(where)) + " ") + order), [], __cb(_, __frame, 3, 30, function ___(__0, __2) { var __1 = __2.map((function(_this) {
            return function(line) {
              return new Row(_this.connection, _this.table, line); };

          })(__this)); return _(null, __1); }, true))); }); };


    Query.prototype.update = function Query_prototype_update__2(columns, where, _) { var __this = this; var __frame = { name: "Query_prototype_update__2", line: 62 }; return __func(_, this, arguments, Query_prototype_update__2, 2, __frame, function __$Query_prototype_update__2() {
        where = getWhereFromObject(where);
        con(getValues(columns));
        return __this.connection.execute(((((("UPDATE " + __this.table) + " SET ") + (getUpdateFromObject(columns))) + " WHERE ") + where), getValues(columns), __cb(_, __frame, 3, 29, _, true)); }); };


    Query.prototype.insert = function Query_prototype_insert__3(pairs, _) { var columns, placeholders, values, __this = this; var __frame = { name: "Query_prototype_insert__3", line: 68 }; return __func(_, this, arguments, Query_prototype_insert__3, 1, __frame, function __$Query_prototype_insert__3() {

        columns = Object.keys(pairs);
        values = columns.map(function(c) {
          return pairs[c]; });

        placeholders = (getPlaceholders(values.length)).join(", ");
        return __this.connection.execute((((((("INSERT INTO " + __this.table) + "(") + columns.join(", ")) + ") VALUES(") + placeholders) + ")"), values, __cb(_, __frame, 7, 29, _, true)); }); };


    Query.prototype.del = function Query_prototype_del__4(where, _) { var __this = this; var __frame = { name: "Query_prototype_del__4", line: 78 }; return __func(_, this, arguments, Query_prototype_del__4, 1, __frame, function __$Query_prototype_del__4() {
        return __this.connection.execute(((("DELETE FROM " + __this.table) + " WHERE ") + getWhereFromObject(where)), [], __cb(_, __frame, 1, 29, _, true)); }); };


    return Query;

  })();

  module.exports = Query;

}).call(this);
