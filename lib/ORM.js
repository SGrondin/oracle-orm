/*** Generated by streamline 0.10.10 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var Column, ORM, Table, oracle, types, util;

  oracle = require("oracle");

  Table = require("./Table");

  Column = require("./Column");

  util = require("util");

  types = require("./types");

  ORM = (function() {
    function ORM(connectData, debug, _) { var link, __this = this; var __frame = { name: "ORM", line: 15 }; return __func(_, this, arguments, ORM, 2, __frame, function __$ORM() {

        if ((debug == null)) {
          debug = false; } ;

        return oracle.connect(connectData, __cb(_, __frame, 5, 20, function ___(__0, __1) { link = __1;
          __this.connection = {
            execute: function(sql, args, cb) {
              if (debug) {
                console.log(("  " + sql), args); } ;

              return link.execute(sql, args, cb); } }; _(); }, true)); }); };




    ORM.prototype.getModels = function ORM_prototype_getModels__1(_) { var ret, tables, __this = this; var __frame = { name: "ORM_prototype_getModels__1", line: 31 }; return __func(_, this, arguments, ORM_prototype_getModels__1, 0, __frame, function __$ORM_prototype_getModels__1() {

        ret = { };
        return __this.connection.execute("SELECT TABLE_NAME FROM USER_TABLES", [], __cb(_, __frame, 3, 31, function ___(__0, __1) { tables = __1;
          return tables.forEach_(__cb(_, __frame, 4, 13, function __$ORM_prototype_getModels__1() {













            return _(null, ret); }, true), -1, (function(_this) { return function __1(_, table) { var columns, primary; var __frame = { name: "__1", line: 36 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return _this.connection.execute("SELECT COLUMN_NAME, DATA_TYPE, DATA_LENGTH FROM USER_TAB_COLUMNS WHERE TABLE_NAME=:1 ORDER BY COLUMN_ID", [table.TABLE_NAME,], __cb(_, __frame, 2, 37, function ___(__0, __1) { columns = __1; columns = columns.map(function(c) { return new Column(c.COLUMN_NAME, types.getType(c.DATA_TYPE), c.DATA_LENGTH); }); return _this.connection.execute(((("" + "SELECT T.CONSTRAINT_NAME AS CONSTRAINT_NAME, C.COLUMN_NAME AS COLUMN_NAME ") + "FROM ALL_CONSTRAINTS T, ALL_CONS_COLUMNS C WHERE T.OWNER = C.OWNER AND T.CONSTRAINT_NAME = C.CONSTRAINT_NAME AND ") + "T.TABLE_NAME = :1 AND T.CONSTRAINT_TYPE='P'"), [table.TABLE_NAME,], __cb(_, __frame, 6, 37, function ___(__0, __2) { primary = __2; primary = primary.map(function(c) { return c.COLUMN_NAME; }); return _(null, ret[table.TABLE_NAME] = new Table(_this.connection, table.TABLE_NAME, columns, primary)); }, true)); }, true)); }); }; })(__this)); }, true)); }); };


    ORM.prototype.execute = function ORM_prototype_execute__2(sql, args, _) { var __this = this; var __frame = { name: "ORM_prototype_execute__2", line: 52 }; return __func(_, this, arguments, ORM_prototype_execute__2, 2, __frame, function __$ORM_prototype_execute__2() {
        return __this.connection.execute(sql, args, __cb(_, __frame, 1, 29, _, true)); }); };


    return ORM;

  })();

  module.exports = ORM;

}).call(this);
